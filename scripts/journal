#!/usr/bin/perl
use strict;
use warnings;
use v5.10;

my $datetime_formatter = DateTime::Format::CLDR->new(
  pattern => 'yyyy-MM-dd HH:mm',
  locale => 'en_US.UTF-8',
  time_zone => 'America/New_York',
);

package entry {
  use Moo;

  use Digest::MD5 qw( md5_hex );
  use DateTime;
  use DateTime::Format::CLDR;

  has title => (
    is       => 'rw',
    isa      => sub { length $_[0] },
    required => 1,
    trigger  => 1,
  );

  sub _trigger_title {
    my ($self, $title) = @_;
    $self->_set_id(md5_hex($title));
  }

  has id => (
    is => 'rwp',
    isa => sub { $_[0] =~ /^\w{32}$/a },
  );

  has time_stamp => (
    is     => 'rw',
    isa    => sub { ref $_[0] eq 'DateTime' },
    coerce => sub {
      my $dt = $_[0];

      if (not ref $dt) {
       $dt = $datetime_formatter->parse_datetime($_[0])
      }

      $dt->set_formatter($datetime_formatter);

      return $dt;
    },
    default => sub {
      my $now = DateTime->now( time_zone => 'America/New_York');
      $now->set_formatter($datetime_formatter);
    },
  );

  has content => (
    is => 'rw',
  );

  has datetime_formatter => (
    is => 'rwp',
    handles => [
      'format_datetime',
    ],
    default => sub { $datetime_formatter },
  );

  sub TO_JSON {
    my $self = shift;
    return {
      time_stamp => $self->time_stamp->stringify,
      title      => $self->title,
      content    => $self->content,
      id         => $self->id,
    };

  }
};

package db {
  use Moo;

  use Env qw( HOME );
  use IO::File;
  use JSON;

  my $file = "$HOME/.local/journal/journal.json";

  has store => (
    is => 'lazy',
  ); sub _build_store {
    my $self = shift;
    my $fh = IO::File->new($file, O_RDONLY);
    my $json = do { local $/; <$fh> };
    undef $fh;
    my $store = decode_json($json);
    return $store;
  };

  has json => (
    is  => 'rwp',
    isa => sub { ref $_[0] eq 'JSON' },
    handles => [
      'encode',
    ],
    default => sub {
      return JSON->new->utf8->allow_blessed->convert_blessed;
    },
  );

  sub persist_store {
    my $self = shift;
    my $fh = IO::File->new($file, 'w');
    my $store_json = $self->encode($self->store);
    print $fh $store_json;
  }

  sub DESTROY {
    my $self = shift;
    $self->persist_store;
  }

  sub store_entry {
    my ($self, $entry) = @_;
    $self->store->{$entry->id} = $entry;
  }

  sub get_entry {
    my ($self, $id) = @_;
    my $entry = $self->store->{$id};
    $entry = entry->new(%$entry);

    if (not defined $entry) {
      return (undef, "Unable to find entry for id $id");
    }
    return ($entry);
  }

  sub get_entries {
    my $self = shift;
    my $store = $self->store;

    my @entries =
      sort { $b->time_stamp cmp $a->time_stamp }
      map  { entry->new(%{$store->{$_}})          }
      keys %$store;

    return (\@entries);
  }

  sub delete_entry {
    my ($self, $id) = @_;

    my $entry = delete $self->store->{$id};
    if (not defined $entry) {
      return (undef, "Entry with id $id not found");
    }

    return 1;
  }
}

package vim {
  use Moo;
  use File::Temp;

  sub get_content {
    my $file = File::Temp->new(
      UNLINK => 1,
    );

    system(vim => $file->filename());

    my $content = do { local $/; <$file> };

    return $content;
  }
};

package view {
  use Moo;
  use List::Util qw( max );
  use String::Errf qw( errf );

  sub render {
    my ($self, $entry) = @_;
    my $template = <<TEMPLATE;
TITLE:      %{title}s
TIME_STAMP: %{time_stamp}s
--------------------------------------------------------------------------------
%{content}s
TEMPLATE

    return errf $template, $entry;
  }

  sub render_entries {
    my ($self, @entries) = @_;
    my $header = <<HEADER;
ID                                      TIME_STAMP              TITLE
HEADER
    my @lines;
    my $template = "%{id}s        %{time_stamp}s        %{title}s\n";
    for my $e (@entries) {
      push @lines, errf( $template, {
        id         => $e->id,
        time_stamp => $e->time_stamp->stringify,
        title      => $e->title,
      });
    }

    my $max = max map { length } ($header, @lines);
    my $divider = "=" x ($max-1) . "\n";

    return join "", ($header, $divider, @lines);
  }
}

package subcommand {
  sub new {
    my %opt = @_;

    my $db = db->new;
		my $vim = vim->new;

    my $title = $opt{title};

		my ($content, @errors) = $vim->get_content;
		if (@errors) {
      say STDERR "Error during editing:";
      say STDERR "- $_" for @errors;
      exit 1;
    }

    my $e = entry->new(
      title => $opt{title},
      content => $content,
    );

    $db->store_entry($e);
    say $e->id;
  }

  sub show {
    my %opt = @_;
    my $id = shift @ARGV;

    my $db = db->new;

    my ($entry, @errors) = $db->get_entry($id);
		if (@errors) {
      say STDERR "Error while getting entry:";
      say STDERR "- $_" for @errors;
      exit 1;
    }

    my $view = view->new();
    my $rendered = $view->render($entry);
    say $rendered;
  }

  sub browse {
    my $db = db->new;
    my ($entries, @errors) = $db->get_entries;
		if (@errors) {
      say STDERR "Error while getting entries:";
      say STDERR "- $_" for @errors;
      exit 1;
    }

    my $view = view->new;
    my $rendered = $view->render_entries(@$entries);
    say $rendered;
  }

  sub delete {
    my %opt = @_;
    my $id = shift @ARGV;

    my $db = db->new;
    my ($ok, @errors) = $db->delete_entry($id);
    if (not $ok) {
      say STDERR "Could not delete entry:";
      say STDERR "- $_" for @errors;
      exit 1;
    }
  }
};

package main {
  use Getopt::Long::Subcommand;
  my %opt;

  sub dispatch;
  sub handle_new;

  my $res = GetOptions(
    subcommands => {
      new => {
        options => {
          'title|t=s' => {
            handler => \$opt{title},
          },
        },
      },

      show   => { },
      browse => { },

      delete   => { },
    },
  );
  exit 1 unless $res->{success};
  my ($cmd) = ($res->{subcommand}->@*);

  {
    new    => \&subcommand::new,
    show   => \&subcommand::show,
    browse => \&subcommand::browse,
    delete   => \&subcommand::delete,
  }->{$cmd}->(%opt);
}
